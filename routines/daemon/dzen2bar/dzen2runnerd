#!/usr/bin/env perl
# A Durchlauferhitzer that deploys various info scraper processes and listens for their output. Offers a single connector to receive && process data, if needed, before forwarding it to dzen2.
use v5.36.0;

use Cwd 'abs_path';
use POSIX qw(strftime WNOHANG);
use Carp;
use File::Basename;
use Try::Tiny;
use open ':std', ':encoding(UTF-8)';

use constant LIB_DIR     => '/usr/local/lib/dzen2runner.d/lib';
use constant CONF_f_Path => "/usr/local/etc/dzen2runnerd.yml";

use lib LIB_DIR;

use MonoLog;
use Daemon;
use ConfigParser;

my($TASKS, $LOG, $DAEMON, $LAYOUT_ARG, $conf_handler);

## cli input
my $USAGE = "Usage: $0 bl | bc | br";
croak "$USAGE"
  unless @ARGV == 1;

$LAYOUT_ARG = shift @ARGV;
croak "Invalid command '$LAYOUT_ARG': $USAGE"
  unless $LAYOUT_ARG =~ /^(bl|bc|br)$/;
##

$LOG = MonoLog::init_logger(
    { tag => (sprintf '%s:%s', basename($0), $LAYOUT_ARG) });
$conf_handler = load_conf({
    path     => CONF_f_Path,
    defaults => 'defaults',
    base_key => 'group',
});

$TASKS = abs_path(LIB_DIR . '/../scraper');

my @ORDER = @{ $conf_handler->get_param({ path => $LAYOUT_ARG . '.scraper' }) };
my %CURRENT_STATE;
@CURRENT_STATE{@ORDER} = ('') x @ORDER;

$SIG{TERM} = $SIG{INT} = \&reaper;

try {
    $DAEMON = run_producer_consumer_pipeline();
    $LOG->info("Started new '$LAYOUT_ARG' instance");
    STDOUT->autoflush(1);
    undef @ARGV;

    while (<>) {
        s/^\[(.*?)\]\s*\r?\n?// and do {
            chomp;
            croak "Misconfiguration, tag '$1' not a supported input filter."
              unless exists $CURRENT_STATE{$1};
            next
              if $_ eq $CURRENT_STATE{$1};
            $CURRENT_STATE{$1} = $_;
            say(join "\x{2595}\x{258F}", grep {/.+/} @CURRENT_STATE{@ORDER});
        }}
} catch {
    $LOG->error($_);
    die($_);
};


sub load_conf {
    my $conf_href = shift;
    my $loaded_conf;
    local $LOG->context->{conf_parser_params} = $conf_href;
    try {
        $loaded_conf = ConfigParser->load($conf_href)
    } catch {
        my $msg = 'failed to load config with params:';
        $LOG->error($msg);
        die($msg)
    };
    return $loaded_conf;
}


sub reaper {
    $DAEMON->childproc_reaper;
    exit 0;
}


sub get_screen_dimensions {
    my($w, $h) = `xrandr` =~ /connected.*?(\d+)x(\d+)/
      or die "Failed to get screen dimensions\n";
    return ($w, $h);
}


sub calculate_y_params {
    my($screen_h) = @_;

    my $bar_extent = $conf_handler->get_param({
        path     => $LAYOUT_ARG . '.height',
        fallback => 20
    });

    my $bar_pos = 'b' eq substr($LAYOUT_ARG, 0, 1)
      ? $screen_h - $bar_extent
      : 0;

    return $bar_pos, $bar_extent;
}


sub calculate_x_params {
    my($screen_w) = @_;

    my $x_pos_area = substr($LAYOUT_ARG, 1, 1);

    # if center bar does not exist, assume two bar setup
    my $center_bar_extent = (
        $x_pos_area eq 'c'
        ? $conf_handler->get_param({ path => $LAYOUT_ARG })
        : $conf_handler->get_param({
            path     => substr($LAYOUT_ARG, 0, 1) . 'c',
            fallback => {},
        })
    )->{width} // 0;

    my $flank_width = ($screen_w - $center_bar_extent) / 2;
    return $flank_width, $center_bar_extent
      if $x_pos_area eq 'c';

    my $x_pos = $x_pos_area eq 'r'
      ? $screen_w - $flank_width
      : 0;

    return $x_pos, $flank_width;
} ## end sub calculate_x_params


sub get_dzen2_options {
    croak "Only composition mode supported"
      if $conf_handler->get_param({ path => 'mode' }) eq 'composition';

    my @options;
    my($px_w, $px_h)        = get_screen_dimensions();
    my($y_pos, $bar_heigth) = calculate_y_params($px_h);
    my($x_pos, $bar_width)  = calculate_x_params($px_w);

    push @options,
      '-w', $bar_width,
      '-x', $x_pos,
      '-y', $y_pos,
      '-h', $bar_heigth,
      '-fn', $conf_handler->get_param({ path => $LAYOUT_ARG . '.font' }),

      '-ta',
      $conf_handler->get_param({
        path     => $LAYOUT_ARG . '.align',
        fallback => 'c'
      }),

      '-bg', $conf_handler->get_param({ path => $LAYOUT_ARG . '.color.bg' })
      // '#000000',

      '-fg', $conf_handler->get_param({ path => $LAYOUT_ARG . '.color.fg' })
      // '#FFFFFF';

    push @options, '-dock' if $conf_handler->get_param({
        path     => $LAYOUT_ARG . '.is_dock',
        fallback => 0,
    });

    return @options;
} ## end sub get_dzen2_options


sub run_producer_consumer_pipeline {
    my @producers;
    push @producers, "$TASKS/$_.pl" for @ORDER;
    pipe my $collector_reader, my $collector_writer
      or die "Failed to create collector pipe: $!";
    pipe my $dzen2_reader, my $dzen2_writer
      or die "Failed to create dzen2 pipe: $!";

    my @options = get_dzen2_options();
    if ($LOG->is_debug) {
        $LOG->context->{dzen2_opt} = \@options;
        $LOG->debug("generated dzen2 configuration for '$LAYOUT_ARG':");
    }
    my $collector = Daemon->is_myself({
        cmd       => undef,
        src       => $collector_reader,
        sink      => $dzen2_writer,
        is_leader => 1,
        uid       => 'dzen2runnerd',
    })->with_child(
        'dzen2',
        {
            cmd => [ 'dzen2', '-p', @options ],
            src => $dzen2_reader,
        }
    );
    open my $null_in, '<', '/dev/null'
      or die "Cannot open /dev/null for reading: $!";
    for (@producers) {
        my $id = fileparse($_, qr/\..*/);
        $collector->with_child(
            $id,
            {
                cmd  => [ 'perl', $_, $id ],
                src  => $null_in,
                sink => $collector_writer
            }
        );
    }
    return $collector->dispatch;
} ## end sub run_producer_consumer_pipeline
