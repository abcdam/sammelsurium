#!/bin/dash
set -eu
#   @abcdam
# Interface for the POSIX-compliant shell library (short: posher)
#   It facilitates the modularization, extension, and sourcing of frequently used,
#   use case-specific shell routines in a simple and uncluttered manner, while aiming
#   to keep the session environment tidier thanks to a lazy-load-first approach.
#
#   TODO: increase call specificity down to the function level with param passthrough
#
# http://gondor.apana.org.au/~herbert/dash
# https://pubs.opengroup.org/onlinepubs/007904875/utilities/xcu_chap01.html#tag_01

_POSHER_LIB_WHITELIST='color yap misc file proc'
_POSHER_RUNTIME_D="/tmp/posher.d/$$"

export _POSHER_CTXT_STATE="${_POSHER_CTXT_STATE:-}"
export POSHER_LIB_DIR='/usr/local/lib/posher.d'

export __POSHER_ERR_MSG_PREFIX="[\033[1;31mFATAL\033[0m]"

abs_path() {
  curr_path="$1"
  while [ -L "$curr_path" ]; do
      tmp_dir="$(cd -P "$(dirname "$curr_path")" && pwd)"
      curr_path="$(ls -ld "$curr_path" | awk '{print $NF}')"
      [ "${curr_path#/}" = "$curr_path" ] && curr_path="$tmp_dir/$curr_path"
  done
  target_dir="$(cd -P "$(dirname "$curr_path")" && pwd)"
  printf '%s/%s' "$target_dir" "$(basename "$curr_path")"
  unset curr_path target_dir tmp_dir
}

is_cmd_available() {
  command -v "${1:-}" > /dev/null
}

# TODO docs
is_param_set() {
  param_to_check="${1:-}"
  mode="${2:-lax}"
  retval="${3:-64}"
  err_msg="${4:-'is_param_set(): got unset/null param in strict mode'}"

  case "$mode" in
    lax) [ -n "${param_to_check:-}" ] && retval=0 
      ;;
    strict) ${param_to_check:?"$__POSHER_ERR_MSG_PREFIX $err_msg"} && retval=0
      ;;
    *) 
  fmt="$__POSHER_ERR_MSG_PREFIX is_param_set(): wrong mode. (expected: {lax|strict} - got: %s)"
      printf "$fmt\n" "$mode" >&2
      exit 64
      ;;
  esac

  unset param_to_check mode err_msg
  return $retval
}

# to register actions in exit trap cmd "queue", pass them as a single string in
# # $1 to append (total of 1 args)
# # $2 with '-unshift' in $1 to prepend (total of 2 args)
add_exitrap() {
  retval=1
  case "$#" in
    1) [ "$1" != "-unshift" ] && _POSHER_EXITRAP="${_POSHER_EXITRAP:+$_POSHER_EXITRAP; }$1" && retval=0;;
    2) [ "$1" = "-unshift" ]  && _POSHER_EXITRAP="$2${_POSHER_EXITRAP:+; $_POSHER_EXITRAP}" && retval=0;;
    *) ;;
  esac
  [ $retval -ne 0 ] && printf '%s\n' 'Usage: add_exitrap ["-unshift"] "<func_1[; cmd_x[; ...]]>"' >&2
  return $retval
}

# $1 -> lib id
# $2 -> func selector
register_sigfile_p() {
  __POSHER_SIG_FILE="$_POSHER_RUNTIME_D/$1-$2.sig"
}

# if a sigfile is registered, it's consumed & returned.
# # else it constructs & returns a sigfile path from args
# $1 -> lib id
# $2 -> func selector
get_sigfile_p() {
  printf '%s' "$__POSHER_SIG_FILE" && unset __POSHER_SIG_FILE \
    || printf '%s/%s-%s.sig' "$_POSHER_RUNTIME_D" "$1" "$2"   \
    || return 1
}

posher() {
  retval=0
  if is_cmd_available "$2"; then
    shift 1
    "$@" || retval=$?
  else
    __posher_intern_run_isolated "$@" || retval=$?
    if [ $retval -ne 0 ]; then
      sigfile="$(get_sigfile_p "$1" "$2")"
      if exival=$(cat "$sigfile"); then
        rm $sigfile ||
          printf "error: rm of sigfile '%s' created by func '%s' failed with code %d. exiting with exit code of func.\n" >&2 \
            "$sigfile" "$2" $?
        exit $exival
      else unset sigfile
      fi
    fi
  fi
  return $retval
}

# $@ -> lib ids
load_posher() {
  retval=0
  IFS=" "
  while [ "$#" -gt 0 ]; do
    __posher_intern_source_if_not_available "$1" \
      && _POSHER_CTXT_STATE="${_POSHER_CTXT_STATE:+$_POSHER_CTXT_STATE:}$1" || retval=$?
    [ $retval -ne 0 ] && [ $retval -ne 11 ] && __posher_intern_error_printer $retval
    shift
  done
  unset IFS
  export _POSHER_CTXT_STATE
}


# # TODO: verify integrity of caller and return path to allow sourcing
case $0 in
  */get-posher) printf '%s' "$(abs_path "$0")" && exit 0 ;;
esac

if ! [ -d "$_POSHER_RUNTIME_D" ]; then
  . "$POSHER_LIB_DIR/posher-intern.sh"
  add_exitrap '-unshift' "rm -r $_POSHER_RUNTIME_D"
fi
